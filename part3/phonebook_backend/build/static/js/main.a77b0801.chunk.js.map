{"version":3,"sources":["components/Persons.js","components/Filter.js","components/PersonForm.js","components/Notification.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Person","person","onClick","name","number","id","Persons","persons","map","key","Filter","value","onChange","PersonForm","props","onSubmit","nameValue","nameOnChange","numberValue","numberOnChange","type","SuccessNotification","message","className","ErrorNotification","baseUrl","axios","get","then","response","data","newObject","post","delete","put","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","nameFilter","setNameFilter","notificationMessage","setNotificationMesage","errorMessage","setErrorMessage","filteredPersons","filter","toLowerCase","includes","useEffect","personService","initialPersons","event","target","preventDefault","some","window","confirm","personToUpdate","find","x","updatedPerson","returnedPerson","setTimeout","catch","error","personObject","concat","personToDelete","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.a77b0801.chunk.js","sourcesContent":["import React from 'react'\n\nconst Persons = ({ persons, onClick }) => {\n  return (\n    <ul>\n      {persons.map(person =>\n        <Person key={person.name} person={person} onClick={onClick} />  \n      )}\n    </ul>\n  )\n}\n\nconst Person = ({ person, onClick }) => {\n  return (\n    <li>\n      {person.name}: {person.number}\n      <button onClick={() => onClick(person.id)}>delete</button>\n    </li>\n  )\n}\n\nexport default Persons;","import React from 'react'\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <div>\n      Filter by name: <input value={value} onChange={onChange} />\n    </div>\n  )\n}\n\nexport default Filter;","import React from 'react'\n\nconst PersonForm = (props) => {\n  return (\n    <form onSubmit={props.onSubmit}>\n      <div>\n        name: <input value={props.nameValue} onChange={props.nameOnChange} />\n      </div>\n      <div>\n        number: <input value={props.numberValue} onChange={props.numberOnChange} type=\"number\" />\n      </div>\n      <div>\n        <button type=\"submit\">Add</button>\n      </div>\n    </form>\n  )\n}\n\nexport default PersonForm;","import React from 'react'\n\nconst SuccessNotification = ({ message }) => {\n  if (message === null) {\n    return null\n  };\n\n  return (\n    <div className=\"successNotification\">\n      {message}\n    </div>\n  )\n}\n\nconst ErrorNotification = ({ message }) => {\n  if (message === null) {\n    return null\n  };\n\n  return (\n    <div className=\"errorNotification\">\n      {message}\n    </div>\n  )\n}\n\n\n\nexport { SuccessNotification, ErrorNotification };","import axios from 'axios'\nconst baseUrl = 'https://glacial-cove-34156.herokuapp.com/api/persons'\n\nconst getPersons = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n}\n\nconst createPerson = newObject => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then(response => response.data);\n}\n\nconst deletePerson = (id) => {\n  return axios.delete(`${baseUrl}/${id}`);\n  // const request = axios.delete(`${baseUrl}/${id}`);\n  // return request.then(response => response.data);\n}\n\nconst updatePerson = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then(response => response.data);\n}\n\n\nexport default { getPersons, createPerson, deletePerson, updatePerson }","import React, { useState, useEffect } from 'react';\nimport Persons from './components/Persons';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport { SuccessNotification, ErrorNotification } from './components/Notification';\nimport personService from './services/persons';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [nameFilter, setNameFilter] = useState('');\n  const [notificationMessage, setNotificationMesage] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const filteredPersons = persons.filter(person => person.name.toLowerCase().includes(nameFilter));\n\n  useEffect(() => {\n    personService\n      .getPersons()\n      .then(initialPersons => {\n        setPersons(initialPersons);\n      })\n  }, []);\n\n  const addPerson = (event) => {\n    event.preventDefault();\n    if (persons.some(person => person.name === newName)) {\n      if (window.confirm(`${newName} has already been added to the phonebook, replace the old number with the new one?`)) {\n        const personToUpdate = persons.find(x => x.name === newName);\n        const updatedPerson = { ...personToUpdate, number: newNumber };\n\n        personService\n          .updatePerson(personToUpdate.id, updatedPerson)\n          .then(returnedPerson => {\n            setPersons(persons.map(person => person.id !== personToUpdate.id ? person : returnedPerson));\n            setNewName('');\n            setNewNumber('');\n            setNotificationMesage(`${newName}'s old number has been replaced with the new number.`);\n            setTimeout(() => {\n              setNotificationMesage(null)\n            }, 3000);\n          })\n          .catch(error => {\n            setErrorMessage(\n              `Information of '${newName} has already been removed from the server.'`\n            );\n            setTimeout(() => {\n              setErrorMessage(null);\n            }, 3000)\n            setPersons(persons.filter(person => person.id !== updatedPerson.id));\n          });\n          \n      }\n\n      \n    } else {\n      const personObject = {\n        name: newName,\n        number: newNumber,\n      };\n\n      personService\n        .createPerson(personObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(personObject));\n          setNewName('');\n          setNewNumber('');\n          setNotificationMesage(`${personObject.name} has been added.`);\n          setTimeout(() => {\n            setNotificationMesage(null)\n          }, 3000);\n        })\n    }\n  }\n\n  const deletePerson = (id) => {\n    const personToDelete = persons.find(person => person.id === id);\n\n    if (window.confirm(`Delete ${personToDelete.name}?`)) {\n      personService\n        .deletePerson(personToDelete.id)\n        .then(() => {\n          setPersons(persons.filter(person => person.id !== personToDelete.id));\n        });\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  }\n\n  const handleNameFilterChange = (event) => {\n    setNameFilter(event.target.value.toLowerCase());\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <SuccessNotification message={notificationMessage} />\n      <ErrorNotification message={errorMessage} />\n      <Filter value={nameFilter} onChange={handleNameFilterChange} />\n      <h3>Add a new</h3>\n      <PersonForm onSubmit={addPerson} \n                  nameValue={newName} \n                  nameOnChange={handleNameChange} \n                  numberValue={newNumber} \n                  numberOnChange={handleNumberChange}\n      />\n      <h3>Numbers</h3>\n      <Persons persons={filteredPersons} onClick={deletePerson} />\n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}